// Generated by CoffeeScript 1.8.0

/* 
Validator
Licensed under MIT
 */

(function() {
  'use strict';
  var factory;

  factory = function($) {
    var Validator, old;
    Validator = (function() {
      function Validator(element) {
        this.$element = $(element);
      }

      return Validator;

    })();
    Validator.prototype.patterns = {
      required: function(name, $item) {
        var regex, result, value;
        regex = /^\s+$/;
        value = $item.val().trim();
        return result = !!value.length && !regex.test(value);
      },
      email: function(name, $item) {
        var regex, result, value, _ref;
        regex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        value = (_ref = $item.val()) != null ? _ref.trim() : void 0;
        return result = regex.test(value);
      }
    };
    Validator.prototype.defineValues = {
      maxLength: null,
      minLength: null,
      max: null,
      min: null,
      check: null
    };
    Validator.prototype.storeValue = function(rule) {
      var pattern, pattern_check, pattern_maxLength, pattern_minLength, patterns, _i, _len;
      pattern_maxLength = /maxLength=/i;
      pattern_minLength = /minLength=/i;
      pattern_check = /check=/i;
      patterns = [pattern_maxLength, pattern_minLength, pattern_check];
      for (_i = 0, _len = patterns.length; _i < _len; _i++) {
        pattern = patterns[_i];
        if (rule.match(pattern)) {
          rule = rule.split('=');
          switch (pattern) {
            case pattern_maxLength:
              this.defineValues.maxLength = rule[1];
              return rule[0];
            case pattern_minLength:
              this.defineValues.minLength = rule[1];
              return rule[0];
            case pattern_check:
              this.defineValues.check = rule[1];
              return rule[0];
          }
        }
      }
      return rule;
    };
    Validator.prototype.passValidator = function(name, $item) {
      return this.validFields[name] = $item.val();
    };
    Validator.prototype.errorValidator = function(name, $item, msg) {
      return this.unvalidFields.push({
        name: name,
        msg: msg,
        item: $item
      });
    };
    Validator.prototype.validateReturn = function() {
      if (this.unvalidFields.length) {
        return this.falsyReturn();
      } else {
        return this.truthyReturn();
      }
    };
    Validator.prototype.truthyReturn = function() {
      return this.cb(this.validFields);
    };
    Validator.prototype.falsyReturn = function() {
      var field, _i, _len, _ref, _results;
      if (!this.multiple) {
        if (this.isOnParent) {
          this.unvalidFields[0].item.parent().addClass(this.errorClass);
        } else {
          this.unvalidFields[0].item.addClass(this.errorClass);
        }
        return this.cb(this.unvalidFields[0]);
      } else {
        _ref = this.unvalidFields;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          if (this.isOnParent) {
            _results.push(field.item.parent().addClass(this.errorClass));
          } else {
            _results.push(field.addClass(this.errorClass));
          }
        }
        return _results;
      }
    };
    Validator.prototype.checker = function(names) {
      var $item, identifier, name, result, rule, rules, _i, _len, _results;
      _results = [];
      for (name in names) {
        if (!(names.hasOwnProperty(name))) {
          continue;
        }
        identifier = "*[data-validator=" + name + "]";
        $item = this.$element.find($(identifier));
        if (!$item.length) {
          throw new Error('Validator: please fill in a element that exisits in your form');
        }
        if (!$item.data('rules').length) {
          throw new Error('Validator: please fill in data-rules attributes');
        }
        rules = $item.data('rules').split(' ');
        for (_i = 0, _len = rules.length; _i < _len; _i++) {
          rule = rules[_i];
          rule = this.storeValue(rule);
          result = this.patterns[rule](name, $item);
          if (!result) {
            this.errorValidator(name, $item, names[name][rule]);
          } else {
            this.passValidator(name, $item);
          }
        }
        _results.push(this.validateReturn());
      }
      return _results;
    };
    Validator.prototype.validate = function(opts, cb) {
      this.msg = opts.msg || {};
      this.isOnParent = opts.isOnParent || true;
      this.multiple = opts.multiple || false;
      this.cb = cb;
      this.unvalidFields = [];
      this.validFields = [];
      this.errorClass = opts.errorClass || 'has-error';
      return this.checker(opts.msg);
    };
    old = $.fn.validate;
    $.fn.validate = function(config, callback) {
      return new Validator(this).validate(config, callback);
    };
    $.fn.validate.constructor = Validator;
    return $.fn.validate.noConflict = function() {
      $.fn.validate = old;
      return this;
    };
  };

  (function(factory) {
    if (typeof define === "function" && define.amd) {
      return define(["jquery"], factory);
    } else if (typeof exports === "object") {
      return factory(require("jquery"));
    } else if (typeof define === "function" && define.cmd) {
      return define(function(require) {
        require("jquery");
        return factory($);
      });
    } else {
      return window.Validator = factory(jQuery);
    }
  })(factory);

}).call(this);
